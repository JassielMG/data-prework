Index: 1.-Python/3.-Bus/bus.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"<img src=\\\"https://bit.ly/2VnXWr2\\\" width=\\\"100\\\" align=\\\"left\\\">\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Bus\\n\",\n    \"\\n\",\n    \"This bus has a passenger entry and exit control system to monitor the number of occupants it carries and thus detect when there are too many.\\n\",\n    \"\\n\",\n    \"At each stop, the entry and exit of passengers is represented by a tuple consisting of two integer numbers.\\n\",\n    \"```\\n\",\n    \"bus_stop = (in, out)\\n\",\n    \"```\\n\",\n    \"The succession of stops is represented by a list of these tuples.\\n\",\n    \"```\\n\",\n    \"stops = [(in1, out1), (in2, out2), (in3, out3), (in4, out4)]\\n\",\n    \"```\\n\",\n    \"\\n\",\n    \"## Tools\\n\",\n    \"You don't necessarily need to use all the tools. Maybe you opt to use some of them or completely different ones, they are given to help you shape the exercise. Programming exercises can be solved in many different ways.\\n\",\n    \"* Data structures: **lists, tuples**\\n\",\n    \"* Loop: **while/for loops**\\n\",\n    \"* Functions: **min, max, len**\\n\",\n    \"\\n\",\n    \"## Tasks\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Variables\\n\",\n    \"stops = [(10, 0), (4, 1), (3, 5), (3, 4), (5, 1), (1, 5), (5, 8), (4, 6), (2, 3)]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 1. Calculate the number of stops.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"9\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"len(stops)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 2. Assign to a variable a list whose elements are the number of passengers at each stop (in-out).\\n\",\n    \"Each item depends on the previous item in the list + in - out.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"The number of passengers by stop is: [10, 13, 11, 10, 14, 10, 7, 5, 4]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"passengers_by_stop=[]\\n\",\n    \"passengers=0\\n\",\n    \"for i, (k,j) in enumerate(stops):\\n\",\n    \"    passengers += k-j\\n\",\n    \"    passengers_by_stop.append(passengers)\\n\",\n    \"\\n\",\n    \"print('The numbers of passengers by stop is:',passengers_by_stop)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 3. Find the maximum occupation of the bus.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"The maximum ouccupation of the bus is of 14 persons in the stop 4\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print('The maximum ouccupation of the bus is of',max(passengers_by_stop), 'persons in the stop',passengers_by_stop.index(max(passengers_by_stop)))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 4. Calculate the average occupation. And the standard deviation.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"The average occupation is:  9.333333333333334\\n\",\n      \"The standard desviation of occupation is:  3.197221015541813\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"print('The average occupation is: ',np.mean(passengers_by_stop))\\n\",\n    \"print('The standard desviation of occupation is: ', np.std(passengers_by_stop))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/1.-Python/3.-Bus/bus.ipynb b/1.-Python/3.-Bus/bus.ipynb
--- a/1.-Python/3.-Bus/bus.ipynb	(revision c369a47025d5078f67ae393529bc6ac57b2a8cb6)
+++ b/1.-Python/3.-Bus/bus.ipynb	(date 1623904060715)
@@ -176,7 +176,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.8.3"
+   "version": "3.9.5"
   }
  },
  "nbformat": 4,
Index: 1.-Python/5.-Temperature-Processor/temperature.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"<img src=\\\"https://bit.ly/2VnXWr2\\\" width=\\\"100\\\" align=\\\"left\\\">\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Temperature Sensor\\n\",\n    \"\\n\",\n    \"There is a temperature sensor in the processor of your company's server. The company wants to analyze the data provided by the sensor to decide if they should change the cooling system for a better one. As changing the cooling system is expensive and you are an excellent data analyst, you can't make a decision without basis.\\n\",\n    \"\\n\",\n    \"## Tools\\n\",\n    \"You don't necessarily need to use all the tools. Maybe you opt to use some of them or completely different ones, they are given to help you shape the exercise. Programming exercises can be solved in many different ways.\\n\",\n    \"1. Data structures: **lists**\\n\",\n    \"2. Loops: **list comprehension**\\n\",\n    \"3. Functions: **min, max, print, len**\\n\",\n    \"4. Conditional statements: **if-elif-else**\\n\",\n    \"\\n\",\n    \"## Tasks\\n\",\n    \"The temperatures measured throughout the 24 hours of a day are:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"temperatures_C = [33, 66, 65, 0, 59, 60, 62, 64, 70, 76, 80, 81, 80, 83, 90, 79, 61, 53, 50, 49, 53, 48, 45, 39]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The first element of the list is the temperature at 12am, the second element is the temperature at 1am, and so on. \\n\",\n    \"\\n\",\n    \"The company has decided that if one of the following events occurs, then the cooling system needs to be replaced for a new one to avoid damaging the processor.\\n\",\n    \"* More than 4 temperatures are greater than or equal to 70ºC.\\n\",\n    \"* Any temperature is above 80ºC.\\n\",\n    \"* The average temperature exceeds 65ºC.\\n\",\n    \"\\n\",\n    \"Follow the steps so that you can make the decision.\\n\",\n    \"\\n\",\n    \"#### 1. Find the minimum temperature of the day and store it in a variable.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"the minimun temperature of the cooling system is:  0\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"minimum_temperature = min(temperatures_C)\\n\",\n    \"print('the minimun temperature of the cooling system is: ',minimum_temperature)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 2. Find the maximum temperature of the day and store it in a variable.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"the maximum temperature of the cooling system is:  90\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"maximum_temperature = max(temperatures_C)\\n\",\n    \"print('the maximum temperature of the cooling system is: ',maximum_temperature)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 3. Create a list with the temperatures that are greater than or equal to 70ºC. Store it in a variable.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[70, 76, 80, 81, 80, 83, 90, 79]\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"greater_than_70c = []\\n\",\n    \"\\n\",\n    \"for i in temperatures_C:\\n\",\n    \"    if i >= 70:\\n\",\n    \"        greater_than_70c.append(i)\\n\",\n    \"\\n\",\n    \"greater_than_70c\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 4. Find the average temperature of the day and store it in a variable.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"the average of temperature of the day in the cooling system is:  60.25\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"avg_temperature = np.mean(temperatures_C)\\n\",\n    \"print('the average of temperature of the day in the cooling system is: ',avg_temperature)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 5. Imagine that there was a sensor failure at 3am and the data for that specific hour was not recorded. How would you estimate the missing value? Replace the current value of the list at 3am for an estimation. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# i would replace the value not recorded for the mean of the dataset\\n\",\n    \"# because the mean is normally the most common value in a distribution\\n\",\n    \"temperatures_C[3]=avg_temperature\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 6. Bonus: the maintenance staff is from the United States and does not understand the international metric system. Help them by converting the temperatures from Celsius to Fahrenheit.\\n\",\n    \"To know more about temperature conversion check this [link](https://en.wikipedia.org/wiki/Conversion_of_units_of_temperature).\\n\",\n    \"\\n\",\n    \"**Formula**: \\n\",\n    \"\\n\",\n    \"$F = 1.8 * C + 32$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"temperatures_F=[]\\n\",\n    \"for c in temperatures_C:\\n\",\n    \"    temperatures_F.append((9/5)*c + 23)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 7. Make a decision!\\n\",\n    \"Now it's time to make a decision taking into account what you have seen until now. \\n\",\n    \"\\n\",\n    \"Remember that if one of the following events occurs, then the cooling system needs to be replaced for a new one to avoid damaging the processor.\\n\",\n    \"* More than 4 temperatures are greater than or equal to 70ºC.\\n\",\n    \"* Any temperature is above 80ºC.\\n\",\n    \"* The average temperature exceeds 65ºC.\\n\",\n    \"\\n\",\n    \"#### To make your decision, check if any of the three conditions above is met. You might need to use some of the variables you created in steps 1 to 6. Print a message to show if the cooling system needs to be changed or not.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[70, 76, 80, 81, 80, 83, 90, 79] \\n\",\n      \" more of 4 temperatures registered are greater than or equal to 70°C\\n\",\n      \"and at least one temperature is above 80°C in the list of temperatures registered\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# According to the events analysis the cooling system must be replace\\n\",\n    \"# because we can prove two of three conditions above\\n\",\n    \"print(greater_than_70c,'\\\\n more of 4 temperatures registered are greater than or equal to 70°C')\\n\",\n    \"print('and at least one temperature is above 80°C in the list of temperatures registered')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Bonus\\n\",\n    \"\\n\",\n    \"The company has decided that the decision you made is not valid. They want you to analyze the data again but this time, the conditions that need to be met in order to change the cooling system are different.\\n\",\n    \"\\n\",\n    \"This time, if one of the following events occurs, then the cooling system needs to be replaced:\\n\",\n    \"* The temperature is greater than 70ºC during more than 4 consecutive hours.\\n\",\n    \"* Any temperature is above 80ºC.\\n\",\n    \"* The average temperature exceeds 65ºC.\\n\",\n    \"\\n\",\n    \"Follow the steps so that you can make the decision.\\n\",\n    \"\\n\",\n    \"#### 1. Create a list with the hours where the temperature is greater than 70ºC. Store it in a variable.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[9, 10, 11, 12, 13, 14, 15]\"\n      ]\n     },\n     \"execution_count\": 22,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"hours = []\\n\",\n    \"\\n\",\n    \"for i,t in enumerate(temperatures_C):\\n\",\n    \"    if t > 70:\\n\",\n    \"        hours.append(i)\\n\",\n    \"        \\n\",\n    \"hours\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 2. Check if the list you created in step 1 has more than 4 consecutive hours. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"According to the data above, the cooling system temperature keep it up above tha 70° in more than 4 consecutive hours\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print('According to the data above, the cooling system temperature keep it up above tha 70° in more than 4 consecutive hours')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 3. Make the decision!\\n\",\n    \"To make your decision, check if any of the three conditions is met. Print a message to show if the cooling system needs to be changed or not.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print('The cooling system must be changed!!')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 4. Find the average value of the temperature lists (ºC and ºF). What is the relation between both average values?\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"62.760416666666664\\n\",\n      \"135.96875\\n\",\n      \"they are different because one is calculated with the initial data and a transformation is applied to the other\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"print(np.mean(temperatures_C))\\n\",\n    \"print(np.mean(temperatures_F))\\n\",\n    \"print('they are different because one is calculated with the initial data and a transformation is applied to the other')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### 5. Find the standard deviation of the temperature lists (ºC and ºF). What is the relation between both standard deviations?\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 29,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"14.641813548637188\\n\",\n      \"26.35526438754694\\n\",\n      \"they are different because one is calculated with the initial data and a transformation is applied to the other\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(np.std(temperatures_C))\\n\",\n    \"print(np.std(temperatures_F))\\n\",\n    \"print('they are different because one is calculated with the initial data and a transformation is applied to the other')\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/1.-Python/5.-Temperature-Processor/temperature.ipynb b/1.-Python/5.-Temperature-Processor/temperature.ipynb
--- a/1.-Python/5.-Temperature-Processor/temperature.ipynb	(revision c369a47025d5078f67ae393529bc6ac57b2a8cb6)
+++ b/1.-Python/5.-Temperature-Processor/temperature.ipynb	(date 1623905330615)
@@ -395,4 +395,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 2
-}
+}
\ No newline at end of file
